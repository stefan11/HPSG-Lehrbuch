% -*-  coding:utf-8; mode:trale-prolog   -*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   $RCSfile: lexicon.pl,v $
%%  $Revision: 1.7 $
%%      $Date: 2006/02/26 18:08:12 $
%%     Author: Stefan Mueller (Stefan.Mueller@cl.uni-bremen.de)
%%    Purpose: Eine kleine Spielzeuggrammatik für die Lehre
%%   Language: Trale
%      System: TRALE 2.7.5 (release ) under Sicstus 3.12.0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

das ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

das ---> (word,
  cat:(head:(det,
             case:acc,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

der ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).


jede ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(every_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).

jeder ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(every_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).


ein ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(exists_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).

ein ---> (word,
  cat:(head:(det,
             case:acc,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(exists_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).


% wir gedenken der Frau
der ---> (word,
  cat:(head:(det,
             case:gen,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

% wir helfen der Frau
der ---> (word,
  cat:(head:(det,
             case:dat,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).


% dem Mann
dem ---> (word,
  cat:(head:(det,
             case:dat,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

% den Mann
den ---> (word,
  cat:(head:(det,
             case:acc,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).


des ---> (word,
  cat:(head:(det,
             case:gen,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

die ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

die ---> (word,
  cat:(head:(det,
             case:acc,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

eines ---> (word,
  cat:(head:(det,
             case:gen,
             spec:cont:(ind:Ind,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(rels:[(exists_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).

sein ---> (word,
  cat:(head:(det,
             case:nom,
             spec:cont:(ind:Ind2,
                        ltop:NLTop)),
       arg_st:[]),
  cont:(ind:(Ind,
             index),
%        ltop:LTop,
        rels:[(def_q,
               arg0:Ind2,
               rstr:Restr),
              (poss_rel,
               lbl:NLTop,
               arg0:event,
               arg1:Ind,
               arg2:Ind2),
              (pronoun_q,
               arg0:Ind,
               rstr:PRestr),
              (pronoun_rel,
               lbl:LTop,
               arg0:Ind)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop),
               (qeq,
                harg:PRestr,
                larg:LTop)])).

kleine ---> (word,
  cat:(head:(adj,
             case:nom,
             scopal:minus,
             mod:(cat:(head:noun,
                       spr:[_],
                       comps:[]),
                  cont:ind:Ind)),
       arg_st:[]),
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(klein_rel,
               lbl:LTop,
               arg0:Ind)],
        hcons:[])).

schwierige ---> (word,
  cat:(head:(adj,
             case:nom,
             scopal:minus,
             mod:(cat:(head:noun,
                       spr:[_],
                       comps:[]),
                  cont:ind:Ind)),
       arg_st:[]),
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(schwierig_rel,
               lbl:LTop,
               arg0:Ind)],
        hcons:[])).

mutmaßliche ---> (word,
  cat:(head:(adj,
             case:nom,
             scopal:plus,
             mod:(cat:(head:noun,
                       spr:[_],
                       comps:[]),
                  cont:(ind:Ind,
                        ltop:NLTop))),
       arg_st:[]),
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(mutmaßlich_rel,
               lbl:LTop,
               arg1:Handel)],
        hcons:[(qeq,
                harg:Handel,
                larg:NLTop)])).


affe ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                       case:nom),
                 spr:[],
                 comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[])).

affen ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[cat:(head:(det,
                          case:dat),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

affe ---> (word,
  cat:(head:(noun,
             case:acc),
       arg_st:[cat:(head:(det,
                       case:acc),
                 spr:[],
                 comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

affens ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                       case:gen),
                 spr:[],
                 comps:[])],
       comps:[]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

einhorn ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(einhorn_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[])).


beispiel ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(beispiel_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[])).


mann ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mann ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[cat:(head:(det,
                          case:dat),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mann ---> (word,
  cat:(head:(noun,
             case:acc),
       arg_st:[cat:(head:(det,
                          case:acc),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mannes ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                          case:gen),
                 spr:[],
                 comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mitarbeiters ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                          case:gen),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mitarbeiter_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).


kind ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kindes ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                          case:gen),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kind ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[cat:(head:(det,
                          case:dat),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kind ---> (word,
  cat:(head:(noun,
             case:acc),
       arg_st:[cat:(head:(det,
                          case:acc),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[cat:(head:(det,
                          case:dat),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  cat:(head:(noun,
             case:acc),
       arg_st:[cat:(head:(det,
                          case:acc),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buches ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                          case:gen),
                    spr:[],
                    comps:[])]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

tochter ---> (word,
  cat:(head:noun,
            case:nom),
       arg_st:[cat:(head:(det,
                          case:nom),
                    spr:[],
                    comps:[]),
               (cat:(head:(noun,
                          case:gen),
                     spr:[],
                     comps:[]),
                cont:ind:Ind2) ]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  cat:(head:(noun,
             case:gen),
       arg_st:[cat:(head:(det,
                          case:gen),
                    spr:[],
                    comps:[]),
               (cat:(head:(noun,
                           case:gen),
                     spr:[],
                     comps:[]),
                cont:ind:Ind2) ]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[cat:(head:(det,
                          case:dat),
                    spr:[],
                    comps:[]),
               (cat:(head:(noun,
                           case:gen),
                     spr:[],
                     comps:[]),
                   cont:ind:Ind2) ]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  cat:(head:(noun,
             case:acc),
       arg_st:[cat:(head:(det,
                          case:acc),
                    spr:[],
                    comps:[]),
               (cat:(head:(noun,
                           case:gen),
                     spr:[],
                     comps:[]),
                cont:ind:Ind2) ]),
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).


er ---> (word,
  cat:(head:(noun,
             case:nom),
       arg_st:[]),
  cont:(ind:(Ind,
             per:third,
             num:sg,
             gen:mas),
        rels:[(pronoun_q,
               arg0:Ind,
               rstr:Restr),(pronoun_rel,
                            lbl:PronounRel,
                            arg0:Ind)],
        hcons:[(qeq,
                harg:Restr,
                larg:PronounRel)])).

ihm ---> (word,
  cat:(head:(noun,
             case:dat),
       arg_st:[]),
  cont:(ind:(Ind,
             per:third,
             num:sg,
             gen:mas),
        rels:[(pronoun_q,
               arg0:Ind,
               rstr:Restr),(pronoun_rel,
                            lbl:PronounRel,
                            arg0:Ind)],
        hcons:[(qeq,
                harg:Restr,
                larg:PronounRel)])).

schläft ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[(cat:(head:(noun,
                           case:nom),
                     spr:[],
                     comps:[]),
                cont:ind:Ind) ]),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(schlafen_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind)],
        hcons:[]) ).

graut ---> (word,
  cat:(head:(verb,
             vform:fin),
       comps:[(cat:(head:(noun,
                          case:dat),
                    spr:[],
                    comps:[]),
               cont:ind:Ind) ] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(grauen_rel,
               lbl:Lbl,
               arg0:Event,
               arg2:Ind)],
        hcons:[]) ).

jagt ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(noun,
                            case:acc),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind2) ] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(jagen_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Ind2)],
        hcons:[])).

kennt ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(noun,
                            case:acc),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind2) ] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(kennen_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Ind2)],
        hcons:[])).

gab ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(noun,
                            case:dat),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind2),
                (cat:(head:(noun,
                            case:acc),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind3)] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(geben_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Ind2,
               arg3:Ind3)],
        hcons:[])).


gibt ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(noun,
                            case:dat),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind2),
                (cat:(head:(noun,
                            case:acc),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind3)] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(geben_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Ind2,
               arg3:Ind3)],
        hcons:[])).


denkt ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(prep,
                            pform:an_pform,
                            case:acc),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind2) ] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(denken_an_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Ind2)],
        hcons:[])).

glaubt ---> (word,
  cat:(head:(verb,
             vform:fin),
       arg_st:[ (cat:(head:(noun,
                            case:nom),
                      spr:[],
                      comps:[]),
                 cont:ind:Ind1),
                (cat:(head:(comp,
                            cform:dass),
                      spr:[],
                      comps:[]),
                 cont:ltop:Larg) ] ),
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(glauben_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind1,
               arg2:Harg)],
        hcons:[(qeq,
                harg:Harg,
                larg:Larg)])).




an ---> (word,
  cat:(head:(prep,
             pform:an_pform,
             case:Cas),
       spr:[],
       arg_st:[(cat:(head:(noun,
                          case:Cas),
                    spr:[],
                    comps:[]),
               cont:(ind:Ind,
                     ltop:LTop)) ] ),
   cont:(ind:Ind,
         ltop:LTop,
         rels:[],
         hcons:[])).


angeblich ---> (word,
   cat:(head:(adv,
              scopal:plus,
              mod:(cat:head:adj,
                   cont:ltop:VLTop)),
        arg_st:[]),
   cont:(ltop:LTop,
         rels:[(angeblich_rel,
                lbl:LTop,
                arg1:Arg1)],
         hcons:[(qeq,
                 harg:Arg1,
                 larg:VLTop)])).


wahrscheinlich ---> (word,
   cat:(head:(adv,
              scopal:plus,
              mod:(cat:head:verb,
                   cont:ltop:VLTop)),
        arg_st:[]),
   cont:(ltop:LTop,
         rels:[(wahrscheinlich_rel,
                lbl:LTop,
                arg1:Arg1)],
         hcons:[(qeq,
                 harg:Arg1,
                 larg:VLTop)])).


dass ---> (word,
  cat:(head:(comp,
             cform:dass),
       spr:[],
       arg_st:[(cat:(head:(verb,
                           vform:fin),
                     spr:[],
                     comps:[]),
                cont:(ltop:LTop,
                      ind:Ind)) ] ),
   cont:(ltop:LTop,
         ind:Ind,
         rels:[],
         hcons:[])).