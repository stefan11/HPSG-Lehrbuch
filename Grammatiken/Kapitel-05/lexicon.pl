% -*-  coding:utf-8; mode:trale-prolog   -*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   $RCSfile: lexicon.pl,v $
%%  $Revision: 1.7 $
%%      $Date: 2006/02/26 18:08:12 $
%%     Author: Stefan Mueller (Stefan.Mueller@cl.uni-bremen.de)
%%    Purpose: Eine kleine Spielzeuggrammatik für die Lehre
%%   Language: Trale
%      System: TRALE 2.7.5 (release ) under Sicstus 3.12.0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

das ---> (word,
  head:(det,
        case:nom,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

das ---> (word,
  head:(det,
        case:acc,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

der ---> (word,
  head:(det,
        case:nom,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).


jede ---> (word,
  head:(det,
        case:nom,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(every_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).

jeder ---> (word,
  head:(det,
        case:nom,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(every_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).



% wir gedenken der Frau
der ---> (word,
  head:(det,
        case:gen,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

% wir helfen der Frau
der ---> (word,
  head:(det,
        case:dat,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).


% dem Mann
dem ---> (word,
  head:(det,
        case:dat,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

% den Mann
den ---> (word,
  head:(det,
        case:acc,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).


des ---> (word,
  head:(det,
        case:gen,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

die ---> (word,
  head:(det,
        case:nom,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

die ---> (word,
  head:(det,
        case:acc,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(def_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)]) ).

eines ---> (word,
  head:(det,
        case:gen,
        spec:cont:(ind:Ind,
                   ltop:NLTop)),
  spr:[],
  comps:[],
  cont:(rels:[(one_q,
               arg0:Ind,
               rstr:Restr)],
        hcons:[(qeq,
                harg:Restr,
                larg:NLTop)])).

kleine ---> (word,
  head:(adj,
        case:nom,
        scopal:minus,
        mod:(head:noun,
             spr:[_],
             comps:[],
             cont:ind:Ind)),
  spr:[],
  comps:[],
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(klein_rel,
               lbl:LTop,
               arg0:Ind)],
        hcons:[])).

schwierige ---> (word,
  head:(adj,
        case:nom,
        scopal:minus,
        mod:(head:noun,
             spr:[_],
             comps:[],
             cont:ind:Ind)),
  spr:[],
  comps:[],
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(schwierig_rel,
               lbl:LTop,
               arg0:Ind)],
        hcons:[])).

mutmaßliche ---> (word,
  head:(adj,
        case:nom,
        scopal:plus,
        mod:(head:noun,
             spr:[_],
             comps:[],
             cont:(ind:Ind,
                   ltop:NLTop))),
  spr:[],
  comps:[],
  cont:(ind:Ind,
        ltop:LTop,
        rels:[(mutmaßlich_rel,
               lbl:LTop,
               arg1:Handel)],
        hcons:[(qeq,
                harg:Handel,
                larg:NLTop)])).


affe ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
              case:nom),
        spr:[],
        comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[])).

affen ---> (word,
  head:(noun,
        case:dat),
  spr:[(head:(det,
                 case:dat),
           comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

affe ---> (word,
  head:(noun,
        case:acc),
  spr:[(head:(det,
                 case:acc),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

affens ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
                 case:gen),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(affe_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

beispiel ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
              case:nom),
        spr:[],
        comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(beispiel_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[])).


mann ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
              case:nom),
        spr:[],
        comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mann ---> (word,
  head:(noun,
        case:dat),
  spr:[(head:(det,
                 case:dat),
           comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mann ---> (word,
  head:(noun,
        case:acc),
  spr:[(head:(det,
                 case:acc),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mannes ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
                 case:gen),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mann_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

mitarbeiters ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
              case:gen),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(mitarbeiter_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).


kind ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
                 case:nom),
           comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kindes ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
                 case:gen),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kind ---> (word,
  head:(noun,
        case:dat),
  spr:[(head:(det,
                case:dat),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

kind ---> (word,
  head:(noun,
        case:acc),
  spr:[(head:(det,
                 case:acc),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(kind_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
                 case:nom),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  head:(noun,
        case:dat),
  spr:[(head:(det,
                 case:dat),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buch ---> (word,
  head:(noun,
        case:acc),
  spr:[(head:(det,
                 case:acc),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

buches ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
                 case:gen),
          spr:[],
          comps:[])],
  comps:[ ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(buch_rel,
               lbl:Lbl,
               arg0:Ind)],
        hcons:[]) ).

tochter ---> (word,
  head:(noun,
        case:nom),
  spr:[(head:(det,
              case:nom),
        spr:[],
        comps:[])],
  comps:[(head:(noun,
                case:gen),
          spr:[],
          comps:[],
          cont:ind:Ind2) ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  head:(noun,
        case:gen),
  spr:[(head:(det,
              case:gen),
        spr:[],
        comps:[])],
  comps:[(head:(noun,
                case:gen),
          spr:[],
          comps:[],
          cont:ind:Ind2) ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  head:(noun,
        case:dat),
  spr:[(head:(det,
              case:dat),
        spr:[],
        comps:[])],
  comps:[(head:(noun,
                case:gen),
          spr:[],
          comps:[],
          cont:ind:Ind2) ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).

tochter ---> (word,
  head:(noun,
        case:acc),
  spr:[(head:(det,
              case:acc),
        spr:[],
        comps:[])],
  comps:[(head:(noun,
                case:gen),
          spr:[],
          comps:[],
          cont:ind:Ind2) ],
  cont:(ind:Ind,
        ltop:Lbl,
        rels:[(tochter_rel,
               lbl:Lbl,
               arg0:Ind,
               arg2:Ind2)],
        hcons:[]) ).


er ---> (word,
  head:(noun,
        case:nom),
  spr:[],
  comps:[]).

ihm ---> (word,
  head:(noun,
        case:dat),
  spr:[],
  comps:[]).

schläft ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[(head:(noun,
                case:nom),
          spr:[],
          comps:[],
          cont:ind:Ind) ],
  cont:(ind:(Event,
             event),
        ltop:Lbl,
        rels:[(schlafen_rel,
               lbl:Lbl,
               arg0:Event,
               arg1:Ind)],
        hcons:[]) ).

graut ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[(head:(noun,
                 case:dat),
          spr:[],
          comps:[]) ] ).

jagt ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[ (head:(noun,
                 case:nom),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:acc),
           spr:[],
           comps:[]) ] ).

kennt ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[ (head:(noun,
                 case:nom),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:acc),
           spr:[],
           comps:[]) ] ).

gab ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[ (head:(noun,
                 case:nom),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:acc),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:dat),
           spr:[],
           comps:[]) ] ).


gibt ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[ (head:(noun,
                 case:nom),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:acc),
           spr:[],
           comps:[]),
          (head:(noun,
                 case:dat),
           spr:[],
           comps:[]) ] ).


denkt ---> (word,
  head:(verb,
        vform:fin),
  spr:[],
  comps:[ (head:(noun,
                 case:nom),
           spr:[],
           comps:[]),
          (head:(prep,
                 pform:an_pform,
                 case:acc),
           spr:[],
           comps:[]) ] ).


an ---> (word,
  head:(prep,
        pform:an_pform,
        case:Cas),
  spr:[],
  comps:[(head:(noun,
                case:Cas),
          spr:[],
          comps:[]) ] ).


angeblich ---> (word,
   head:(adv,
         mod:(head:adj,
              cont:ltop:VLTop)),
   spr:[],
   comps:[],
   cont:(ltop:LTop,
         rels:[(angeblich_rel,
                lbl:LTop,
                arg1:Arg1)],
         hcons:[(qeq,
                 harg:Arg1,
                 larg:VLTop)])).


wahrscheinlich ---> (word,
   head:(adv,
         mod:(head:verb,
              cont:ltop:VLTop)),
   spr:[],
   comps:[],
   cont:(ltop:LTop,
         rels:[(wahrscheinlich_rel,
                lbl:LTop,
                arg1:Arg1)],
         hcons:[(qeq,
                 harg:Arg1,
                 larg:VLTop)])).
                        