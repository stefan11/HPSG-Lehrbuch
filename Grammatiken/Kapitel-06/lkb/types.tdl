;; -*-  coding:utf-8   -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   $RCSfile: types.tdl,v $
;;  $Revision: 1.2 $
;;      $Date: 2007/03/05 11:26:29 $
;;     Author: Stefan Mueller, Universität Bremen
;;    Purpose: 
;;   Language: TDL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

none_or_sign := bot.

none := none_or_sign.

sign := none_or_sign & [
 phon list,
 cat  cat,
 cont mrs ].

list := bot.
e_list := list.
ne_list := list & [
  hd bot,
  tl list ].

cat := bot & [
  head   head,
  spr    list,
  comps  list,
  arg_st list ].


mrs := bot & [
  gtop handle,
  ltop handle,
  ind  event_or_index,
  rels  list,
  hcons list ].


phrase := sign & [
 non_head_dtrs list,
 dtrs          list ].

headed_phrase := phrase & [
  head_dtr sign ].

head_non_specifier_phrase  := headed_phrase.
head_non_complement_phrase := headed_phrase.

head_specifier_phrase  := head_non_complement_phrase.
head_complement_phrase := head_non_specifier_phrase.
head_adjunct_phrase    := head_non_complement_phrase & head_non_specifier_phrase.

non_headed_phrase := phrase.

lexical_sign := sign.

; empty HCONS
non_scopal_le := lexical_sign.

; empty RELS
non_relational_le := lexical_sign.

non_scopal_non_relational_le := non_scopal_le & non_relational_le.

; lexical elements which do not contribute anything but share
; LTOP and IND with their only element in their ARG-ST.
; complement prepositions and some complementizers.
transparent_head_le := non_scopal_non_relational_le.

arg0_le := lexical_sign.

ltop_lbl_le := lexical_sign.

arg0_ltop_lbl_le := arg0_le & ltop_lbl_le.

word := lexical_sign.

saturated_word   := word.

relational_word  := word & ltop_lbl_le.

relational_arg0_word := relational_word & arg0_ltop_lbl_le.

determiner_word := saturated_word.

determiner := determiner_word.
possessive := determiner_word.

noun_word := word.

pers_pronoun := saturated_word   & noun_word & non_scopal_non_relational_le.

proper_noun := saturated_word   & noun_word.

; noun with a determiner
det_noun_word := noun_word & non_scopal_le & relational_arg0_word.

; noun with a determiner and nothing else.
simple_noun  := det_noun_word.

; noun with a determiner and a genitive NP.
relational_noun := det_noun_word.

verb_word    := relational_arg0_word.

non_scopal_verb_word := verb_word & non_scopal_le.

subjlos_verb := non_scopal_verb_word.
intrans_verb := verb_word.

non_scopal_intrans_verb := intrans_verb & non_scopal_verb_word.

strict_intrans_verb := non_scopal_intrans_verb.
np_np_dat_verb      := non_scopal_intrans_verb & bi_or_more_val_verb.
np_pp_verb          := non_scopal_intrans_verb & bi_or_more_val_verb.

; helfen, kennen, geben
bi_or_more_val_verb := non_scopal_verb_word.

; kennen, geben
trans_verb := bi_or_more_val_verb.

strict_trans_verb := trans_verb.
ditrans_verb      := trans_verb.

glauben_denken_verb := intrans_verb.

preposition_word := word & non_scopal_le.
comp_preposition := preposition_word & transparent_head_le.
mod_preposition  := preposition_word & relational_word.

noun_mod_preposition := mod_preposition & isect_n_modifier_word.

location_noun_mod_prep := noun_mod_preposition.


n_modifier_word := n_modifier & relational_word.


isect_n_modifier_word := isect_n_modifier & n_modifier_word.

intersective_adj := isect_n_modifier_word & non_scopal_le.


attr_adjective_word := n_modifier_word.


; klug
simple_attr_adj := saturated_word & attr_adjective_word & intersective_adj. 

; treu
attr_np_adj     := attr_adjective_word & intersective_adj. 

; mutmaßlich              
scopal_adj := saturated_word & attr_adjective_word & scopal_modifier_le.



; Adjektive, Präpositionen, Nomina, aber auch Relativsätze (=phrasal)
n_modifier := sign.

isect_modifier_le := lexical_sign.

isect_n_modifier := isect_modifier_le & n_modifier.

; Adverbien
v_modifier := sign.

scopal_modifier_le := ltop_lbl_le.

scopal_v_modifier_le := scopal_modifier_le & v_modifier.

adv_word := saturated_word & v_modifier.
scopal_adv_word := scopal_v_modifier_le & adv_word.

head := bot & [
   mod  none_or_sign,
   spec none_or_sign,
   scopal bool ].

non_modifier_head := head & [
  mod none ].

non_spec_head := head & [
  spec none ].

; prep steht für Prä- und Postpositionen, der initial-Wert wird in le_macros.pl festgelegt
prep := non_spec_head.

comp_prep := prep & intro_case_head & non_modifier_head &
 [ pform pform ].

; kann nach Nomina und vor Verben stehen, siehe le_macros.pl
mod_prep := prep.

intro_case_head := head &
 [ case case ]. 

det := intro_case_head & intro_gen_num & non_modifier_head.
       
noun := intro_case_head & non_modifier_head & non_spec_head.

adj_or_verb := non_spec_head.

verb := non_modifier_head & adj_or_verb &
 [ vform vform ].

adj := adj_or_verb.
attr_adj := intro_case_head & adj.

comp := non_spec_head & non_modifier_head & [
  cform cform ].

adv := non_spec_head.

cform := bot.

dass := cform.

string := bot.

pform := bot.

an_pform  := pform.


vform  := bot.
fin    := vform.


relation := bot & [
  lbl handle ].

arg0_relation := relation & [
  arg0 event_or_index ].


affe_rel         := arg0_relation.
beispiel_rel     := arg0_relation.
buch_rel         := arg0_relation.
einhorn_rel      := arg0_relation.
frau_rel         := arg0_relation.
kind_rel         := arg0_relation.
mann_rel         := arg0_relation.
mitarbeiter_rel  := arg0_relation.
mörder_rel       := arg0_relation.
speisekammer_rel := arg0_relation.
tofu_rel         := arg0_relation.
wurst_rel        := arg0_relation.


named_rel := arg0_relation & [
  name string ].

quant_rel := arg0_relation & [
  rstr handle,
  body handle ].

def_q     := quant_rel.
every_q   := quant_rel.
exists_q  := quant_rel.
proper_q  := quant_rel.

arg1_relation := relation & [
  arg1 event_or_index ].

arg2_relation := relation & [
  arg2 event_or_index ].

arg3_relation := relation & [
  arg3 event_or_index ].


arg01_relation := arg0_relation & arg1_relation.

arg02_relation := arg0_relation & arg2_relation.

arg012_relation := arg01_relation & arg02_relation.

arg0123_relation := arg012_relation & arg3_relation.

arg023_relation := arg02_relation & arg3_relation.

arg12_relation := arg1_relation & arg2_relation.

groß_rel        := arg1_relation.
interessant_rel := arg1_relation.
klein_rel       := arg1_relation.
klug_rel        := arg1_relation.
schwierig_rel   := arg1_relation.

treu_rel := arg12_relation.

angeblich_rel      := arg1_relation.
mutmaßlich_rel     := arg1_relation.
wahrscheinlich_rel := arg1_relation.


bellen_rel   := arg01_relation.
lachen_rel   := arg01_relation.
schlafen_rel := arg01_relation.


jagen_rel     := arg012_relation.
kennen_rel    := arg012_relation.
lieben_rel    := arg012_relation.
denken_an_rel := arg012_relation.
glauben_rel   := arg012_relation.


in_rel        := arg12_relation.

geben_rel :=  arg0123_relation.

grauen_rel := arg02_relation.

poss_rel := arg012_relation.

tochter_rel := arg02_relation.

event_or_index := bot.

event := event_or_index.

index := event_or_index & intro_gen_num & [
  per per ].

handle := event_or_index.

qeq := bot & [
  harg handle,
  larg handle ].


case := bot.

nom_or_dat_or_acc := case.

; Plural
nom_or_gen_or_acc := case.

; Endung `n' in Singular Junggesellen
gen_or_dat_or_acc := case.

nom_or_acc := nom_or_gen_or_acc & nom_or_dat_or_acc.
dat_or_acc := gen_or_dat_or_acc & nom_or_dat_or_acc.
gen_or_dat := gen_or_dat_or_acc.

nom := nom_or_acc.
gen := gen_or_dat & nom_or_gen_or_acc.
dat := gen_or_dat & dat_or_acc.
acc := nom_or_acc & dat_or_acc.


genus := bot.

; Beamte
fem_or_mas := genus.

; Index von Mädchen, Weib, ...
fem_or_neu := genus.

; ein
mas_or_neu := genus.
       
fem := fem_or_mas & fem_or_neu.
mas := fem_or_mas & mas_or_neu.
neu := fem_or_neu & mas_or_neu.

per := bot.

first_or_third := per.

; Stamm 2:  ich fange vs. du fängst, er fängt
second_or_third := per.

first  := first_or_third.
second := second_or_third.
third  := first_or_third & second_or_third.


num := bot.
sg  := num.
pl  := num.


intro_gen_num := bot & [
  gen genus,
  num num ].

bool := bot.

plus  := bool.
minus := bool.




